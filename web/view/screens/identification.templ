package screens

import (
	"ht/web/view/components"
	"ht/web/view/layout"
)

templ Identification(sentence string) {
	@layout.Index("Identification") {
		<div class="grow flex flex-col self-stretch bg-[#F0F5EE] justify-center items-center px-12">
			<h1 class="text-5xl py-10 text-center">Voice identification</h1>
			<div class="w-full flex-row lg:flex lg:items-center lg:justify-between mb-2">
				<div class="min-w-0 flex-1">
					<div class="flex flex-col items-center justify-center">
						<h1 id="stepHeader" class="text-center"></h1>
						<span class="text-gray-600 text-center">{ sentence }</span>
						<!-- TODO: add recording feature -->
						<!-- TODO: Add logic for sending requests to server - where are the endpoints? -->
						<!-- TODO: stop recording after 10s automatically-->
						<div class="flex gap-4 w-full items-center">
							<div class="flex gap-2 my-5">
								<button
									id="restartButton1"
									type="button"
									class="items-center p-2 rounded-full hover:bg-slate-300 hidden"
									_="on click
									stopRecording()
									hide me
									if $isRecording is true
										toggle @disabled on #nextButton
									end
									toggle @disabled on #nextButton
									set $isRecording to false
									remove .bg-green-600 from next <button/>
									add .bg-red-600 to next <button/>
									add .hover:bg-red-500 to next <button/>
									put 'Mic' into .material-icons in next <button/>
									remove .text-white from next <button/>
									remove @disabled from #recordButton
									add .hidden to #sparkle
									add .hidden to me
									add .transition-none to #progressBarFill
									remove .w-full from #progressBarFill
									add .w-0 to #progressBarFill"
								>
									<span class="material-icons white text-xxl">restart_alt</span>
								</button>
								<button
									id="recordButton"
									type="button"
									class="inline-flex items-center p-2 rounded-full bg-red-600 hover:bg-red-500"
									_="init
									set $isRecording to false
								  on click 
									if $isRecording is false
										startRecording()
										set $isRecording to true
										remove .bg-green-600 from me
										add .bg-red-600 to me
										add .hover:bg-red-500 to me
										put 'stop' into .material-icons in me
										remove .hidden from previous <button/>
										add .inline-flex to previous <button/>
										remove .w-0 from #progressBarFill
										remove .transition-none from #progressBarFill
										add .w-full to #progressBarFill
									else
										stopRecording()
										set $isRecording to false
										remove .bg-red-600 from me
										remove .hover:bg-red-500 from me
										remove @disabled from #nextButton
										add .bg-green-600 to me
										toggle @disabled on me
										put 'check' into .material-icons in me
										add .text-white to me
										remove .hidden from #sparkle
										add .transition-none to #progressBarFill
									end"
								>
									<span class="material-icons text-xxl">mic</span>
								</button>
							</div>
							<div class="relative h-[3px] w-full overflow-visible">
								<div class="absolute h-[2px] w-full flex flex-col justify-end">
									<div class="h-[1px] w-full bg-indigo-300"></div>
								</div>
								<div id="progressBarFill" class="absolute left-0 h-[3px] w-0 bg-indigo-500 rounded-lg duration-10000 ease-linear"></div>
							</div>
						</div>
						<input
							class="w-56 button_primary text-white font-bold p-2 my-2 rounded-lg cursor-pointer"
							id="nextButton"
							type="submit"
							value="Identify"
							disabled
							_="on click
								go to url http://localhost:2323/identification/identicationPending"
						/>
						<p class="text-indigo-500 hidden" id="sparkle">‚ú® Successfully recorded!</p>
					</div>
				</div>
			</div>
		</div>
		@components.CSRF()
		<script>
			var mediaRecorder;
			var micStream;

			async function startRecording() {
				if (!window.AudioContext || 
						!window.MediaStreamAudioSourceNode || 
						!window.AudioWorkletNode) {
						alert('Your browser does not support the required APIs.');
						return;
				}

				// Request access to the user's microphone
				micStream = await navigator
					.mediaDevices
					.getUserMedia({ audio: true });

				mediaRecorder = new MediaRecorder(micStream, { mimeType: 'audio/webm' });

				mediaRecorder.start();
				console.log("recorder started", mediaRecorder.state);
			}

			async function stopRecording() {
				mediaRecorder.stop();
				console.log("recorder stopped", mediaRecorder.state);

				const chunks = [];

				mediaRecorder.ondataavailable = (e) => {
					console.log("audio data available");
					chunks.push(e.data);
				};

				mediaRecorder.onstop = async (e) => {
					const blob = new Blob(chunks, { type: mediaRecorder.mimeType });
					const formData = new FormData();
					formData.append("recording", blob);

					if (micStream) {
						micStream.getTracks().forEach(track => track.stop());
						console.log("Microphone stream stopped");
					}

					const csrfToken = document.getElementsByName("gorilla.csrf.Token")[0].value;
					response = await fetch(`/identification/createIdentificationAttempt`, {
							method: 'POST',
							headers: {
								'X-CSRF-Token': csrfToken,
							},
							body: formData,
					});
					if (response.ok) {
							console.log("response", response);
					} else {
							alert("Saving audio failed. Please try again.");
					}
				};
			}
		</script>
	}
}

templ Result(success bool) {
	if success {
		@ResultSuccess()
	} else {
		@ResultFailure()
	}
}

templ ResultSuccess() {
	@layout.Index("Final Result") {
		<div class="grow flex flex-col self-stretch bg-[#F0F5EE] justify-center items-center">
			<div class="flex-col justify-start items-center gap-4 flex">
				<div class="py-2 flex-col justify-center items-center gap-1 flex">
					<div class="justify-center items-center gap-2.5 inline-flex">
						<div class="text-[#150D1D] text-2xl font-semibold leading-loose text-center">Success</div>
					</div>
					<div class="text-zinc-500 text-sm font-normal leading-tight text-center">‚ú® This was really you Voice ‚ú®</div>
				</div>
			</div>
		</div>
		<script>
			const jsConfetti = new JSConfetti()
			jsConfetti.addConfetti({
				// emojis: ['üåà', '‚ö°Ô∏è', 'üí•', '‚ú®', 'üí´', 'üå∏'],
				confettiColors: [
					'#ff0a54', '#ff477e', '#ff7096', '#ff85a1', '#fbb1bd', '#f9bec7',
				],
				emojiSize: 30,
				confettiNumber: 500,
			})
		</script>
	}
}

templ ResultFailure() {
	@layout.Index("Final Result") {
		<div class="grow flex flex-col self-stretch bg-[#F0F5EE] justify-center items-center">
			<div class="flex-col justify-start items-center gap-4 flex">
				<div class="py-2 flex-col justify-center items-center gap-1 flex">
					<div class="justify-center items-center gap-2.5 inline-flex">
						<div class="text-[#F47687] text-2xl font-semibold leading-loose text-center">Fraud detected</div>
					</div>
					<div class="text-zinc-500 text-sm font-normal leading-tight text-center">We have detected a fake voice. Please call authorities.</div>
					<input
						class="w-56 mt-10 button_primary text-white font-bold p-2 my-2 rounded-lg cursor-pointer bg-[#F47687]"
						id="nextButton"
						type="submit"
						value="Inform authorities"
					/>
				</div>
			</div>
		</div>
	}
}

templ WaitForAuthentication() {
	@layout.Index("Waiting for Voic Auhtntication") {
		<div
			class="grow shrink basis-0 self-stretch py-10 bg-[#F0F5EE] flex-col justify-center items-center inline-flex"
			_="init
				wait 10s then go to url http://localhost:2323/identification/result"
		>
			<div class="flex-col justify-start items-center gap-4 flex">
				<div class="py-2 flex-col justify-center items-center gap-1 flex">
					<div class="justify-center items-center gap-2.5 inline-flex">
						<div class="text-[#150D1D] text-2xl font-semibold leading-loose text-center">Waiting for authentication</div>
					</div>
					<div class="text-zinc-500 text-sm font-normal leading-tight text-center">The last time you‚Äôll have to do this. We promise.</div>
				</div>
			</div>
			<div class="text-center mt-6">
				<div class="inline-flex items-center justify-start gap-1">
					<svg role="status" class="mr-2 h-6 w-6 animate-spin fill-indogo-900 text-grey-100" viewBox="0 0 100 101" fill="grey" xmlns="http://www.w3.org/2000/svg">
						<path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="lightgray"></path>
						<path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="purple"></path>
					</svg>
					<span>Loading ...</span>
				</div>
			</div>
		</div>
	}
}
