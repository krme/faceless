package screens

import (
	"ht/model"
	"ht/web/view/components"
	"ht/web/view/layout"
)

templ User(user *model.User) {
	@layout.Index("User") {
		@layout.InnerBody(100, 100, 0, 0) {
			<div class="max-w-full lg:w-[60vw]">
				<div class="w-full flex-row lg:flex lg:items-center lg:justify-between mb-8">
					<div class="min-w-0 flex-1">
						<h1>Your account</h1>
						<div class="mt-1 flex flex-col sm:mt-0 sm:flex-row sm:flex-wrap">
							@components.HeaderInfo(user.CreatedAt.Format("2006-01-02"), "event")
							@components.HeaderInfo(user.UpdatedAt.Format("2006-01-02"), "edit_calendar")
						</div>
					</div>
				</div>
			</div>
		}
	}
}

templ ShowResultSuccess() {
	@layout.Index("Final Result") {
		<div class="grow flex flex-col self-stretch bg-[#F0F5EE] justify-center items-center">
			<div class="flex-col justify-start items-center gap-4 flex">
				<div class="py-2 flex-col justify-center items-center gap-1 flex">
					<div class="justify-center items-center gap-2.5 inline-flex">
						<div class="text-[#150D1D] text-2xl font-semibold leading-loose text-center">Success</div>
					</div>
					<div class="text-zinc-500 text-sm font-normal leading-tight text-center">✨ This was really you Voice ✨</div>
				</div>
			</div>
		</div>
		<script>
			const jsConfetti = new JSConfetti()
			jsConfetti.addConfetti({
				// emojis: ['🌈', '⚡️', '💥', '✨', '💫', '🌸'],
				confettiColors: [
					'#ff0a54', '#ff477e', '#ff7096', '#ff85a1', '#fbb1bd', '#f9bec7',
				],
				emojiSize: 30,
				confettiNumber: 500,
			})
		</script>
	}
}

templ ShowResultFailure() {
	@layout.Index("Final Result") {
		<div class="grow flex flex-col self-stretch bg-[#F0F5EE] justify-center items-center">
			<div class="flex-col justify-start items-center gap-4 flex">
				<div class="py-2 flex-col justify-center items-center gap-1 flex">
					<div class="justify-center items-center gap-2.5 inline-flex">
						<div class="text-[#150D1D] text-2xl font-semibold leading-loose text-center">FRAUD</div>
					</div>
					<div class="text-zinc-500 text-sm font-normal leading-tight text-center">😱 This was not your voice 😱</div>
				</div>
			</div>
		</div>
		// <script>
		// 	const jsConfetti = new JSConfetti()
		// 	jsConfetti.addConfetti({
		// 		// emojis: ['🌈', '⚡️', '💥', '✨', '💫', '🌸'],
		// 		confettiColors: [
		// 			'#ff0a54', '#ff477e', '#ff7096', '#ff85a1', '#fbb1bd', '#f9bec7',
		// 		],
		// 		emojiSize: 30,
		// 		confettiNumber: 500,
		// 	})
		// </script>
	}
}

templ ShowResultReady() {
	@layout.Index("Verification is Ready") {
		<div class="grow flex flex-col self-stretch bg-[#F0F5EE] justify-center items-center">
			<div class="flex-col justify-start items-center gap-4 flex">
				<div class="py-2 flex-col justify-center items-center gap-1 flex">
					<div class="justify-center items-center gap-2.5 inline-flex">
						<div class="text-[#150D1D] text-2xl font-semibold leading-loose text-center">Your verification result is ready!</div>
					</div>
					<div class="text-zinc-500 text-sm font-normal leading-tight text-center">Let`s see if it is really you.</div>
				</div>
				<div class="h-9 flex-col justify-center items-center gap-6 flex w-full place-self-center">
					<div class=" h-9 flex-col justify-center items-center gap-2 flex w-56 place-self-center">
						<a class="self-stretch h-9 px-4 py-2  rounded-md shadow-sm justify-center items-center gap-1 inline-flex button_primary cursor-pointer place-self-center" href="/user/showResultSuccess">
							<div class="text-[#F9F9F9] font-bold">Go to</div>
						</a>
					</div>
				</div>
			</div>
		</div>
	}
}

templ WaitForAuthentication() {
	@layout.Index("Waiting for Voic Auhtntication") {
		<div
			class="grow shrink basis-0 self-stretch py-10 bg-[#F0F5EE] flex-col justify-center items-center inline-flex"
			_="init
				wait 5s then go to url http://localhost:2323/user/showResultReady"
		>
			<div class="flex-col justify-start items-center gap-4 flex">
				<div class="py-2 flex-col justify-center items-center gap-1 flex">
					<div class="justify-center items-center gap-2.5 inline-flex">
						<div class="text-[#150D1D] text-2xl font-semibold leading-loose text-center">Waiting for authentication</div>
					</div>
					<div class="text-zinc-500 text-sm font-normal leading-tight text-center">The last time you’ll have to do this. We promise.</div>
				</div>
			</div>
			<div class="text-center mt-6">
				<div class="inline-flex items-center justify-start gap-1">
					<svg role="status" class="mr-2 h-6 w-6 animate-spin fill-indogo-900 text-grey-100" viewBox="0 0 100 101" fill="grey" xmlns="http://www.w3.org/2000/svg">
						<path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="lightgray"></path>
						<path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="purple"></path>
					</svg>
					<span>Loading ...</span>
				</div>
			</div>
		</div>
	}
}

templ Identify(sentence string) {
	@layout.Index("Identify") {
		<div class="grow flex flex-col self-stretch bg-[#F0F5EE] justify-center items-center px-12">
			<h1 class="text-5xl py-10 text-center">Voice identification</h1>
			<div class="w-full flex-row lg:flex lg:items-center lg:justify-between mb-2">
				<div class="min-w-0 flex-1">
					<div class="flex flex-col items-center justify-center">
						<h1 id="stepHeader" class="text-center"></h1>
						<span class="text-gray-600 text-center">{ sentence }</span>
						<!-- TODO: add recording feature -->
						<!-- TODO: Add logic for sending requests to server - where are the endpoints? -->
						<!-- TODO: stop recording after 10s automatically-->
						<div class="flex gap-4 w-full items-center">
							<div class="flex gap-2 my-5">
								<button
									id="restartButton1"
									type="button"
									class="items-center p-2 rounded-full hover:bg-slate-300 hidden"
									_="on click
									hide me
									if $isRecording is true
										toggle @disabled on #nextButton
									end
									toggle @disabled on #nextButton
									set $isRecording to false
									remove .bg-green-600 from next <button/>
									add .bg-red-600 to next <button/>
									add .hover:bg-red-500 to next <button/>
									put 'Mic' into .material-icons in next <button/>
									remove .text-white from next <button/>
									remove @disabled from #recordButton
									add .hidden to #sparkle
									add .hidden to me
									add .transition-none to #progressBarFill
									remove .w-full from #progressBarFill
									add .w-0 to #progressBarFill"
								>
									<span class="material-icons white text-xxl">restart_alt</span>
								</button>
								<button
									id="recordButton"
									type="button"
									class="inline-flex items-center p-2 rounded-full bg-red-600 hover:bg-red-500"
									_="init
									set $isRecording to false
								  on click 
									if $isRecording is false
										set $isRecording to true
										remove .bg-green-600 from me
										add .bg-red-600 to me
										add .hover:bg-red-500 to me
										put 'stop' into .material-icons in me
										remove .hidden from previous <button/>
										add .inline-flex to previous <button/>
										remove .w-0 from #progressBarFill
										remove .transition-none from #progressBarFill
										add .w-full to #progressBarFill
									else
										set $isRecording to false
										remove .bg-red-600 from me
										remove .hover:bg-red-500 from me
										remove @disabled from #nextButton
										add .bg-green-600 to me
										toggle @disabled on me
										put 'check' into .material-icons in me
										add .text-white to me
										remove .hidden from #sparkle
										add .transition-none to #progressBarFill
									end"
								>
									<span class="material-icons text-xxl">mic</span>
								</button>
							</div>
							<div class="relative h-[3px] w-full overflow-visible">
								<div class="absolute h-[2px] w-full flex flex-col justify-end">
									<div class="h-[1px] w-full bg-indigo-300"></div>
								</div>
								<div id="progressBarFill" class="absolute left-0 h-[3px] w-0 bg-indigo-500 rounded-lg duration-10000 ease-linear"></div>
							</div>
						</div>
						<input
							class="w-56 button_primary text-white font-bold p-2 my-2 rounded-lg cursor-pointer"
							id="nextButton"
							type="submit"
							value="Identify"
							disabled
							_="on click
								go to url http://localhost:2323/user/waitforauthentication"
						/>
						<p class="text-indigo-500 hidden" id="sparkle">✨ Successfully recorded!</p>
					</div>
				</div>
			</div>
		</div>
	}
}

// templ Register() {
// 	@layout.Index("Register") {
// 		<div class="h-screen w-96 flex flex-col bg-[#130D1D] justify-center overflow-hidden pt-5 pb-80">
// 			<div class="h-full flex flex-col gap-24 justify-between">
// 				<div class="items-start gap-4 inline-flex">
// 					<div class="w-[30px] self-stretch flex-col justify-center items-center gap-2.5 inline-flex"></div>
// 					<h2 class="text-[#F0F5EE] text-5xl font-normal">Faceless</h2>
// 				</div>
// 				<div class="flex flex-col gap-10">
// 					<div class="justify-start items-start gap-4 inline-flex">
// 						<div class="w-[30px] self-stretch flex-col justify-center items-center gap-2.5 inline-flex"></div>
// 						<div class="flex-col justify-start items-start gap-1 inline-flex">
// 							<a href="/register" class="text-[#F0F5EE] text-2xl font-semibold cursor-pointer">
// 								<div class="text-[#F0F5EE] text-2xl font-semibold">Sign up</div>
// 								<div class="text-[#F0F5EE] text-sm font-normal">Create your account.</div>
// 							</a>
// 						</div>
// 					</div>
// 					<div class="self-stretch justify-start items-start gap-4 inline-flex">
// 						<div class="w-[30px] self-stretch flex-col justify-center items-center gap-2.5 inline-flex"></div>
// 						<div class="flex-col justify-start items-start gap-1 inline-flex">
// 							<a href="/user/onboardingStart" class="text-[#F0F5EE] text-2xl font-semibold cursor-pointer">
// 								<div class="text-[#F0F5EE] text-2xl font-semibold">IDnow Verification </div>
// 								<div class="text-[#F0F5EE] text-sm font-normal">The last time you’ll need to verify through IDnow</div>
// 							</a>
// 						</div>
// 					</div>
// 					<div class="justify-start items-start gap-4 inline-flex">
// 						<div class="w-[30px] self-stretch flex-col justify-center items-center gap-2.5 inline-flex"></div>
// 						<div class="flex-col justify-start items-start gap-1 inline-flex">
// 							<a href="/user/onboardingRecording" class="text-[#F0F5EE] text-2xl font-semibold cursor-pointer">
// 								<div class="text-[#F0F5EE] text-2xl font-semibold">Voice Recordings</div>
// 								<div class="text-[#F0F5EE] text-sm font-normal">Record 3 simple sentences to get verified</div>
// 							</a>
// 						</div>
// 					</div>
// 				</div>
// 			</div>
// 		</div>
// 		<div class="grow flex flex-col self-stretch bg-[#F0F5EE] justify-center items-center">
// 			@components.Form(components.FormConf{HxPost: "/auth/registerWithEmail", Class: "mb-4 w-96"}) {
// 				<h1 class="text-2xl font-bold pb-4">
// 					Sign up now
// 				</h1>
// 				<div class="mb-4">
// 					@components.InputText("Email", "Your email", "email", "email@example.com", "email", "")
// 				</div>
// 				<div class="mb-6">
// 					@components.InputPassword("Password", "password", "password")
// 				</div>
// 				<div>
// 					<span class="text-zinc-500 text-sm font-normal font-['Inter'] leading-tight">By clicking continue, you agree to our<br/></span>
// 					<span class="text-zinc-500 text-sm font-normal font-['Inter'] underline leading-tight">Terms of Service</span>
// 					<span class="text-zinc-500 text-sm font-normal font-['Inter'] leading-tight">and </span>
// 					<span class="text-zinc-500 text-sm font-normal font-['Inter'] underline leading-tight">Privacy Policy</span>
// 					<span class="text-zinc-500 text-sm font-normal font-['Inter'] leading-tight">.</span>
// 				</div>
// 				<input
// 					class="w-full button_primary text-white font-bold p-2 my-2 rounded-lg cursor-pointer"
// 					type="submit"
// 					value="Sign up"
// 				/>
// 				<div class="flex flex-row justify-center">
// 					<a class="inline-block align-baseline font-medium text-sm text-[#130D1D] hover:text-[#2f2047] cursor-pointer" href="/login">
// 						Already registered?
// 					</a>
// 				</div>
// 			}
// 		</div>
// 	}
// }
templ OnboardingStart() {
	@layout.Index("IDNow") {
		@Sidebar()
		<div class="grow shrink basis-0 self-stretch py-10 bg-[#F0F5EE] flex-col justify-center items-center gap-6 inline-flex">
			<div class="flex-col justify-start items-center gap-4 flex">
				<div class="py-2 flex-col justify-center items-center gap-1 flex">
					<div class="justify-center items-center gap-2.5 inline-flex">
						<div class="text-[#150D1D] text-2xl font-semibold leading-loose">Start Verification</div>
					</div>
					<div class="text-zinc-500 text-sm font-normal leading-tight">The last time you’ll have to do this. We promise.</div>
				</div>
				<div class="h-9 flex-col justify-center items-center gap-6 flex w-full place-self-center">
					<div class=" h-9 flex-col justify-center items-center gap-2 flex w-56 place-self-center">
						<a class="self-stretch h-9 px-4 py-2  rounded-md shadow-sm justify-center items-center gap-1 inline-flex button_primary cursor-pointer place-self-center" href="/user/onboardingRecording/1">
							<div class="text-[#F9F9F9] font-bold">Go to</div>
							// <img class="w-[21px] h-[21px] rounded-[3px] border border-black/20" src="https://via.placeholder.com/21x21"/>
						</a>
					</div>
				</div>
			</div>
		</div>
	}
}

templ OnboardingRecording(sentence string, step int) {
	@layout.Index("Reference recording") {
		@Sidebar()
		@RecordSentence(sentence)
	}
}

templ OnboardingSuccess() {
	@layout.Index("Reference recording") {
		@Sidebar()
		<div class="grow shrink basis-0 self-stretch py-10 bg-[#F0F5EE] flex-col justify-center items-center gap-6 inline-flex">
			<div class="flex-col justify-start items-center gap-4 flex">
				<div class="py-2 flex-col justify-center items-center gap-1 flex">
					<div class="justify-center items-center gap-2.5 inline-flex">
						<div class="text-[#150D1D] text-2xl font-semibold leading-loose text-center">Your're all set!</div>
					</div>
					<div class="text-zinc-500 text-sm font-normal leading-tight text-center">Say goodgye to endless hours of waiting and awkward video calls. <br/>From now on, authentication will be faster and more comfortable.</div>
				</div>
				<div class="h-9 flex-col justify-center items-center gap-6 flex w-full place-self-center">
					<div class=" h-9 flex-col justify-center items-center gap-2 flex w-56 place-self-center">
						<a class="self-stretch h-9 px-4 py-2  rounded-md shadow-sm justify-center items-center gap-1 inline-flex button_primary cursor-pointer place-self-center" href="/user/identify">
							<div class="text-[#F9F9F9] font-bold">Go to</div>
							// <img class="w-[21px] h-[21px] rounded-[3px] border border-black/20" src="https://via.placeholder.com/21x21"/>
						</a>
					</div>
				</div>
			</div>
		</div>
		<script>
			const jsConfetti = new JSConfetti()
			jsConfetti.addConfetti({
				confettiColors: [
					'#ff0a54', '#ff477e', '#ff7096', '#ff85a1', '#fbb1bd', '#f9bec7',
				],
				emojiSize: 30,
				confettiNumber: 500,
			})
		</script>
	}
}

templ Sidebar() {
	<div class="h-screen w-96 flex flex-col bg-[#130D1D] justify-center overflow-hidden p-8 gap-24">
		<div class="h-full flex flex-col gap-28 justify-center">
			<div class="items-start gap-4 inline-flex">
				<div class="self-stretch flex-col justify-center items-center gap-2.5 inline-flex"></div>
				<h2 class="text-[#F0F5EE] text-5xl font-normal">Faceless</h2>
			</div>
			<div class="flex flex-col gap-6">
				<div class="justify-start items-start gap-4 inline-flex">
					<div class="self-stretch flex-col justify-center items-center "></div>
					<div class="flex-col justify-start items-start gap-1 inline-flex">
						<a href="/register" class="text-[#F0F5EE] text-2xl font-semibold cursor-pointer">
							<div class="text-[#F0F5EE] text-2xl font-semibold">Sign up</div>
							<div class="text-[#F0F5EE] text-sm font-normal">Create your account.</div>
						</a>
					</div>
				</div>
				<div class="self-stretch justify-start items-start gap-4 inline-flex">
					<div class="self-stretch flex-col justify-center items-center "></div>
					<div class="flex-col justify-start items-start gap-1 inline-flex">
						<a href="/user/onboardingStart" class="text-[#F0F5EE] text-2xl font-semibold cursor-pointer">
							<div class="text-[#F0F5EE] text-2xl font-semibold">IDnow Verification </div>
							<div class="text-[#F0F5EE] text-sm font-normal">The last time you’ll need to verify through IDnow</div>
						</a>
					</div>
				</div>
				<div class="justify-start items-start gap-4 inline-flex">
					<div class="self-stretch flex-col justify-center items-center "></div>
					<div class="flex-col justify-start items-start gap-1 inline-flex">
						<a href="/user/onboardingRecording/1" class="text-[#F0F5EE] text-2xl font-semibold cursor-pointer">
							<div class="text-[#F0F5EE] text-2xl font-semibold">Voice Recordings</div>
							<div class="text-[#F0F5EE] text-sm font-normal">Record 3 simple sentences to get verified</div>
						</a>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ RecordSentence(sentence string) {
	<div
		class="grow flex flex-col self-stretch bg-[#F0F5EE] justify-center items-center px-12"
		_="init 
			set $step to getCurrentStep()
			put 'Record yourself saying the following sentence ' + $step + '/3' into #stepHeader"
	>
		<div class="w-full flex-row lg:flex lg:items-center lg:justify-between mb-2">
			<div class="min-w-0 flex-1">
				<div class="flex flex-col items-center justify-center">
					<h1 id="stepHeader" class="text-center"></h1>
					<span class="text-gray-600 text-center">{ sentence }</span>
					<!-- TODO: add select state feature (if selected ) - check -->
					<!-- TODO: add recording feature -->
					<!-- TODO: Add logic for sending requests to server - where are the endpoints? -->
					<!-- TODO: stop recording after 10s automatically-->
					<div class="flex gap-4 w-full items-center">
						<div class="flex gap-2 my-5">
							<button
								id="restartButton1"
								type="button"
								class="items-center p-2 rounded-full hover:bg-slate-300 hidden"
								_="on click
									hide me
									if $isRecording is true
										toggle @disabled on #nextButton
									end
									toggle @disabled on #nextButton
									set $isRecording to false
									remove .bg-green-600 from next <button/>
									add .bg-red-600 to next <button/>
									add .hover:bg-red-500 to next <button/>
									put 'Mic' into .material-icons in next <button/>
									remove .text-white from next <button/>
									remove @disabled from #recordButton
									add .hidden to #sparkle
									add .hidden to me
									add .transition-none to #progressBarFill
									remove .w-full from #progressBarFill
									add .w-0 to #progressBarFill"
							>
								<span class="material-icons white text-xxl">restart_alt</span>
							</button>
							<button
								id="recordButton"
								type="button"
								class="inline-flex items-center p-2 rounded-full bg-red-600 hover:bg-red-500"
								_="init
									set $isRecording to false
								  on click 
									if $isRecording is false
										startRecording()
										set $isRecording to true
										remove .bg-green-600 from me
										add .bg-red-600 to me
										add .hover:bg-red-500 to me
										put 'stop' into .material-icons in me
										remove .hidden from previous <button/>
										add .inline-flex to previous <button/>
										remove .w-0 from #progressBarFill
										remove .transition-none from #progressBarFill
										add .w-full to #progressBarFill
									else
										stopRecording()
										set $isRecording to false
										remove .bg-red-600 from me
										remove .hover:bg-red-500 from me
										remove @disabled from #nextButton
										add .bg-green-600 to me
										toggle @disabled on me
										put 'check' into .material-icons in me
										add .text-white to me
										remove .hidden from #sparkle
										add .transition-none to #progressBarFill
									end"
							>
								<span class="material-icons text-xxl">mic</span>
							</button>
						</div>
						<div class="relative h-[3px] w-full overflow-visible">
							<div class="absolute h-[2px] w-full flex flex-col justify-end">
								<div class="h-[1px] w-full bg-indigo-300"></div>
							</div>
							<div id="progressBarFill" class="absolute left-0 h-[3px] w-0 bg-indigo-500 rounded-lg duration-10000 ease-linear"></div>
						</div>
					</div>
					<input
						class="w-56 button_primary text-white font-bold p-2 my-2 rounded-lg cursor-pointer"
						id="nextButton"
						type="submit"
						value="Next Recording"
						disabled
						_="init
							if getCurrentStep() is '3'
								put 'Evaluate' into @value of me
							end
						on click
							navigateToNextStep()"
					/>
					<p class="text-indigo-500 hidden" id="sparkle">✨ Successfully recorded!</p>
				</div>
			</div>
		</div>
	</div>
	<style>
		#animated-border {
			border-top: 2px solid #000; /* Initial border */
			width: 0;
			transition: width 10s, border-top-width 10s;
		}

		#animated-border.animate {
			width: 100%;
			border-top-width: 5px; /* Thicker border */
		}
	</style>
	@components.CSRF()
	<script>
		var mediaRecorder;
		var micStream;

		async function startRecording() {
			if (!window.AudioContext || 
					!window.MediaStreamAudioSourceNode || 
					!window.AudioWorkletNode) {
					alert('Your browser does not support the required APIs.');
					return;
			}

			// Request access to the user's microphone
			micStream = await navigator
				.mediaDevices
				.getUserMedia({ audio: true });

			mediaRecorder = new MediaRecorder(micStream, { mimeType: 'audio/webm' });

			mediaRecorder.start();
			console.log("recorder started", mediaRecorder.state);
		}

		async function stopRecording() {
			mediaRecorder.stop();
			console.log("recorder stopped", mediaRecorder.state);

			const chunks = [];

			mediaRecorder.ondataavailable = (e) => {
				console.log("audio data available");
				chunks.push(e.data);
			};

			mediaRecorder.onstop = async (e) => {
				const blob = new Blob(chunks, { type: mediaRecorder.mimeType });
				const formData = new FormData();
				formData.append("recording", blob);

				if (micStream) {
					micStream.getTracks().forEach(track => track.stop());
					console.log("Microphone stream stopped");
				}

				var step = getCurrentStep();

				const csrfToken = document.getElementsByName("gorilla.csrf.Token")[0].value;
				response = await fetch(`/user/createReferenceRecording/${step}`, {
						method: 'POST',
						headers: {
							'X-CSRF-Token': csrfToken,
						},
						body: formData,
				});
				if (response.ok) {
						console.log("response", response);
				} else {
						alert("Saving audio failed. Please try again.");
				}
			};
		}

		function getCurrentStep() {
			var step = '1';
			var splitUrl = window.location.pathname.split('/')
			if (splitUrl.length > 1) {
					step = splitUrl.pop();
			}
			return step;
		}

		function navigateToNextStep() {
			var step = getCurrentStep();
			var nextStep = parseInt(step) + 1;
			if (nextStep <= 3) {
					window.location.replace('/user/onboardingRecording/' + nextStep);
			} else {
					window.location.replace('/user/onboardingSuccess');
			}
		}
	</script>
}
